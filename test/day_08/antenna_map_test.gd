class_name AntennaMapTest
extends GdUnitTestSuite
@warning_ignore('unused_parameter')
@warning_ignore('return_value_discarded')

func test_create_antenna_map() -> void:
	var map := AntennaMap.new()
	map.add_line(".....a....")
	assert_str(map.get_pos(Vector2i(5, 0))).is_equal("a")

func test_find_antennas() -> void:
	var map := AntennaMap.new()
	map.add_line(".....a....")
	map.add_line("..0.......")
	map.add_line(".......A..")
	map.find_antennas()
	assert_int(map.antennas.size()).is_equal(3)

func test_find_antinodes_with_2_equal_antennas() -> void:
	var map := AntennaMap.new()
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("....a.....")
	map.add_line("..........")
	map.add_line(".....a....")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.find_antennas()
	map.find_antinodes()
	assert_int(map.antinodes.size()).is_equal(2)
	assert_int(map.antinodes.count(Vector2i(3, 1))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(6, 7))).is_equal(1)

func test_find_antinodes_with_3_equal_antennas_and_outside_pos() -> void:
	var map := AntennaMap.new()
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("....a.....")
	map.add_line("........a.")
	map.add_line(".....a....")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.find_antennas()
	map.find_antinodes()
	assert_int(map.antinodes.size()).is_equal(4)
	assert_int(map.antinodes.count(Vector2i(3, 1))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(6, 7))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(0, 2))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(2, 6))).is_equal(1)

func test_find_antinodes_with_different_antennas() -> void:
	var map := AntennaMap.new()
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("..........")
	map.add_line("....a.....")
	map.add_line("........a.")
	map.add_line(".....a....")
	map.add_line("..........")
	map.add_line("......A...")
	map.add_line("..........")
	map.add_line("..........")
	map.find_antennas()
	map.find_antinodes()
	assert_int(map.antinodes.size()).is_equal(4)
	assert_int(map.antinodes.count(Vector2i(3, 1))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(6, 7))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(0, 2))).is_equal(1)
	assert_int(map.antinodes.count(Vector2i(2, 6))).is_equal(1)

func test_find_antinodes_with_example() -> void:
	var map := setup_map_example()
	map.find_antennas()
	map.find_antinodes()
	assert_int(map.antinodes.size()).is_equal(14)

func setup_map_example() -> AntennaMap:
	var map := AntennaMap.new()
	map.add_line("............")
	map.add_line("........0...")
	map.add_line(".....0......")
	map.add_line(".......0....")
	map.add_line("....0.......")
	map.add_line("......A.....")
	map.add_line("............")
	map.add_line("............")
	map.add_line("........A...")
	map.add_line(".........A..")
	map.add_line("............")
	map.add_line("............")
	return map
